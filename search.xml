<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java用Calender类型打印日历详解</title>
      <link href="posts/3acd4d3c.html"/>
      <url>posts/3acd4d3c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java用Calender类型，打印日历详解"><a href="#Java用Calender类型，打印日历详解" class="headerlink" title="Java用Calender类型，打印日历详解"></a>Java用Calender类型，打印日历详解</h1><p>首先我们要明白：</p><p>   1.系统的每个星期的第一天是星期日</p><ol start="2"><li>Calendar calendar = Calendar.getInstance();返回calender抽象类的子类对象（这里用到了多态）</li><li>返回的weekday需要减1才是中国的星期</li><li>月份也是如此，我们所使用的是1-12月，但是系统是0-11月，返回时需要减1</li><li>计算每个月第一天是星期几，打印空格个数根据自己需要的格式打印</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ping<span class="token punctuation">.</span>demo02<span class="token punctuation">.</span>homework</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">SourceTree</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入想要查询的月份: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期一\t星期二\t星期三\t星期四\t星期五\t星期六\t星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> weekday <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//系统在时间为一个星期的第五天，实际上是星期4</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weekday <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//打印前面三天的空格</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">==</span> month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//从第一天开始遍历</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//碰到周日要换行，为第一天1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment">//但是经过加1的操作，则在2的时候换行</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA 基础阶段 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-第一篇</title>
      <link href="posts/619157b.html"/>
      <url>posts/619157b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-软件设计模式概述"><a href="#设计模式-软件设计模式概述" class="headerlink" title="设计模式:软件设计模式概述"></a>设计模式:软件设计模式概述</h1><h2 id="软件设计模式的产生背景"><a href="#软件设计模式的产生背景" class="headerlink" title="软件设计模式的产生背景"></a>软件设计模式的产生背景</h2><p>设计模式”这个术语最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977 年，美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯托夫·亚历山大（Christopher Alexander）在他的著作《建筑模式语言：城镇、建筑、构造（A Pattern Language: Towns Building Construction）中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p>1979 年他的另一部经典著作《建筑的永恒之道》（The Timeless Way of Building）进一步强化了设计模式的思想，为后来的建筑设计指明了方向。</p><p>1987 年，肯特·贝克（Kent Beck）和沃德·坎宁安（Ward Cunningham）首先将克里斯托夫·亚历山大的模式思想应用在 Smalltalk 中的图形用户接口的生成中，但没有引起软件界的关注。</p><p>直到 1990 年，软件工程界才开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。</p><p>1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》（Design Patterns: Elements of Reusable Object-Oriented Software）一书，在本教程中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）匿名著称。</p><p>直到今天，狭义的设计模式还是本教程中所介绍的 23 种经典设计模式。</p><h2 id="软件设计模式的概念与意义"><a href="#软件设计模式的概念与意义" class="headerlink" title="软件设计模式的概念与意义"></a>软件设计模式的概念与意义</h2><p>有关软件设计模式的定义很多，有些从模式的特点来说明，有些从模式的作用来说明。本教程给出的定义是大多数学者公认的，从以下两个方面来说明。</p><h4 id="1-软件设计模式的概念"><a href="#1-软件设计模式的概念" class="headerlink" title="1. 软件设计模式的概念"></a>1. 软件设计模式的概念</h4><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><h4 id="2-学习设计模式的意义"><a href="#2-学习设计模式的意义" class="headerlink" title="2. 学习设计模式的意义"></a>2. 学习设计模式的意义</h4><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><p>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</p><h2 id="软件设计模式的基本要素"><a href="#软件设计模式的基本要素" class="headerlink" title="软件设计模式的基本要素"></a>软件设计模式的基本要素</h2><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p><h4 id="1-模式名称"><a href="#1-模式名称" class="headerlink" title="1. 模式名称"></a>1. 模式名称</h4><p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p><h4 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h4><p>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p><h4 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h4><p>模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p><h4 id="4-效果"><a href="#4-效果" class="headerlink" title="4. 效果"></a>4. 效果</h4><p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA 基础阶段 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机电脑外接显示屏闪烁问题（硬件与软件结合）解决方法</title>
      <link href="posts/2e7e0051.html"/>
      <url>posts/2e7e0051.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="外接屏幕闪烁解决方法"><a href="#外接屏幕闪烁解决方法" class="headerlink" title="外接屏幕闪烁解决方法"></a>外接屏幕闪烁解决方法</h1><h2 id="一、屏幕分辨率设置（配置）"><a href="#一、屏幕分辨率设置（配置）" class="headerlink" title="一、屏幕分辨率设置（配置）"></a>一、屏幕分辨率设置（配置）</h2><h3 id="1、开始按钮—-gt-设置-组合快捷键：Win-I-Fn-F9-进入win10系统设置。"><a href="#1、开始按钮—-gt-设置-组合快捷键：Win-I-Fn-F9-进入win10系统设置。" class="headerlink" title="1、开始按钮—>设置(组合快捷键：Win+I/Fn+F9 进入win10系统设置。)"></a>1、开始按钮—&gt;设置(组合快捷键：Win+I/Fn+F9 进入win10系统设置。)</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/computer/problem/image-20210717123329286.png"></p><h3 id="2、左键单击”系统”（显示、声音、通知、电源）选项-或者“搜索框”输入字母“d”后弹出的下拉菜单—-gt-显示设置"><a href="#2、左键单击”系统”（显示、声音、通知、电源）选项-或者“搜索框”输入字母“d”后弹出的下拉菜单—-gt-显示设置" class="headerlink" title="2、左键单击”系统”（显示、声音、通知、电源）选项(或者“搜索框”输入字母“d”后弹出的下拉菜单—>显示设置)"></a>2、左键单击”系统”（显示、声音、通知、电源）选项(或者“搜索框”输入字母“d”后弹出的下拉菜单—&gt;显示设置)</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/computer/problem/image-20210717123519156.png"></p><h3 id="3、显示—-gt-高级显示设置"><a href="#3、显示—-gt-高级显示设置" class="headerlink" title="3、显示—>高级显示设置"></a>3、显示—&gt;高级显示设置</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/computer/problem/image-20210717123743388.png"></p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/computer/problem/image-20210717123843559.png"></p><h3 id="4-进入外接显示屏适配器"><a href="#4-进入外接显示屏适配器" class="headerlink" title="4.进入外接显示屏适配器"></a>4.进入外接显示屏适配器</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/computer/problem/image-20210717124152352.png"></p><h3 id="5-修改刷新频率与电脑一致"><a href="#5-修改刷新频率与电脑一致" class="headerlink" title="5.修改刷新频率与电脑一致"></a>5.修改刷新频率与电脑一致</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/computer/problem/image-20210717124620046.png"></p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/computer/problem/image-20210717143612299.png"></p><h2 id="二、修改屏幕分辨率（配置）"><a href="#二、修改屏幕分辨率（配置）" class="headerlink" title="二、修改屏幕分辨率（配置）"></a>二、修改屏幕分辨率（配置）</h2><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/computer/problem/image-20210717125438178.png"></p><h2 id="三、硬件排查："><a href="#三、硬件排查：" class="headerlink" title="三、硬件排查："></a>三、硬件排查：</h2><h2 id="1-将外接显示屏连接其他主机（排查外接显示器）"><a href="#1-将外接显示屏连接其他主机（排查外接显示器）" class="headerlink" title="1.将外接显示屏连接其他主机（排查外接显示器）"></a>1.将外接显示屏连接其他主机（排查外接显示器）</h2><h2 id="2-排查线路（插拔你使用的HDMI线或者VGA线）"><a href="#2-排查线路（插拔你使用的HDMI线或者VGA线）" class="headerlink" title="2.排查线路（插拔你使用的HDMI线或者VGA线）"></a>2.排查线路（插拔你使用的HDMI线或者VGA线）</h2><h3 id="3-排除同一插排影响，外接显示器和电脑电源分开（拔出电脑电源，使用电脑电池）"><a href="#3-排除同一插排影响，外接显示器和电脑电源分开（拔出电脑电源，使用电脑电池）" class="headerlink" title="3.排除同一插排影响，外接显示器和电脑电源分开（拔出电脑电源，使用电脑电池）"></a>3.排除同一插排影响，外接显示器和电脑电源分开（拔出电脑电源，使用电脑电池）</h3><p>如果出现硬件问题，该买的还得买</p><h2 id="如有帮助，不胜荣幸！"><a href="#如有帮助，不胜荣幸！" class="headerlink" title="如有帮助，不胜荣幸！"></a>如有帮助，不胜荣幸！</h2>]]></content>
      
      
      <categories>
          
          <category> 电脑小姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑 </tag>
            
            <tag> 小姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 正则表达式的使用</title>
      <link href="posts/dc530199.html"/>
      <url>posts/dc530199.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> JAVA 基础阶段 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList集合仿写</title>
      <link href="posts/bbb8986e.html"/>
      <url>posts/bbb8986e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ArrayList集合仿写"><a href="#ArrayList集合仿写" class="headerlink" title="ArrayList集合仿写"></a>ArrayList集合仿写</h1><h3 id="1-ArrayList泛型不能直接填写基本数据类型-只能填写他们的包装类"><a href="#1-ArrayList泛型不能直接填写基本数据类型-只能填写他们的包装类" class="headerlink" title="1.ArrayList泛型不能直接填写基本数据类型,只能填写他们的包装类"></a>1.ArrayList泛型不能直接填写基本数据类型,只能填写他们的包装类</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/java_img/java_07_Sting/image-20210715141120609.png"></p><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法:"></a>2.方法:</h3><p> **&lt; E &gt;**表示一种指定的数据类型，叫做泛型。 E ，取自Element（元素）的首字母。在出现 E 的地方，我们使 用一种引用数据类型将其替换即可，表示我们将存储哪种引用类型的元素。</p><p>对于元素的操作,基本体现在——增、删、查。</p><p>常用的方法有： public boolean add(E e) ：将指定的元素添加到此集合的尾部。</p><p>public E remove(int index) ：移除此集合中指定位置上的元素。返回被删除的元素。</p><p> public E get(int index) ：返回此集合中指定位置上的元素。返回获取的元素。</p><p> public int size() ：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。</p><p> public E set(int index,E  e): 设置索引的值为 e;</p><p>public void clear():清空数组,实际上未清空,但是索引的存在,抛出异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ping<span class="token punctuation">.</span>test02</span><span class="token punctuation">;</span><span class="token comment">//模拟java.util.ArrayList类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhpArrayList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token comment">//构造方法</span>    <span class="token keyword">public</span> <span class="token class-name">ZhpArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element <span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">//创建一个临时数组,长度是原数组长度+5</span>            <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>elementData<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//将原数组中的数据复制到目标数组[temp]中</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//画龙点睛之笔</span>            elementData <span class="token operator">=</span> temp <span class="token punctuation">;</span><span class="token comment">//非常重要</span>            elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//简单</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组下表越界，请查收!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//简单</span>        index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment">/*   public String remove(int i){//有点难度        String s = elementData[i];        System.arraycopy(elementData, i+1, elementData, i , index - i - 1);        index--;        return s;    }*/</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//有点难度</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> index<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        index<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//简单</span>        <span class="token keyword">return</span> index <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> element<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//简单</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> element <span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ping<span class="token punctuation">.</span>test02</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhpArrayListTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ZhpArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhpArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">traverseList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除索引为0的元素: "</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">traverseList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新索引为1的元素为 1的元素原来是: "</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">traverseList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/** * 遍历list集合 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">traverseList</span><span class="token punctuation">(</span><span class="token class-name">ZhpArrayList</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> JAVA 基础阶段 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java String:字符串常量池</title>
      <link href="posts/67c36978.html"/>
      <url>posts/67c36978.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java-String-字符串常量池"><a href="#Java-String-字符串常量池" class="headerlink" title="Java String:字符串常量池"></a>Java String:字符串常量池</h1><p>基础的引用数据类型;</p><p>java设计者为String提供字符串常量池以提高其性能</p><p>现在就来讲讲字符串常量池吧</p><h2 id="1-字符串常量池的具体原理是什么"><a href="#1-字符串常量池的具体原理是什么" class="headerlink" title="1.字符串常量池的具体原理是什么?"></a>1.字符串常量池的具体原理是什么?</h2><h2 id="2-字符串常量池的设计思想是什么"><a href="#2-字符串常量池的设计思想是什么" class="headerlink" title="2.字符串常量池的设计思想是什么?"></a>2.字符串常量池的设计思想是什么?</h2><p>a.字符串的分配,和其他的对象分配一样,耗费高昂的时间和空间代价,作为最基础的数据类型,大量频繁的创建字符串,极大程度的影响程序的性能.</p><p>b.JVM为了提高性能和减少内存开销,在实例字符串常量的时候进行了一些优化</p><ul><li><p>为字符串开辟一个字符串常量池,类似缓存区</p></li><li><p>创建字符串常量时,首先坚持字符串常量池是否存在该字符串,存在的话返回引用实例,不存在,实例该字符串并放入池中</p><p>1.实现的基础</p><ul><li><p>实现该优化的基础是因为字符串是不可变的，可以不用担心数据冲突进行共享</p></li><li><p>运行时实例创建的全局字符串常量池中有一个表，总是为池中每个唯一的字符串对象维护一个引用,这就意味着它们一直引用着字符串常量池中的对象，所以，在常量池中的这些字符串不会被垃圾收集器回收</p><p>代码：从字符串常量池中获取相应的字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//原来不存在，实例化该字符串并且放入常量池</span><span class="token class-name">String</span> ss <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//字符串常量池中含有，返回“hello”的引用实例</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1 == ss :"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="3-字符串常量池在哪里"><a href="#3-字符串常量池在哪里" class="headerlink" title="3.字符串常量池在哪里?"></a>3.字符串常量池在哪里?</h2><p>首先先了解一下堆，栈，方法区</p><p><strong><em>\</em>堆区**</strong>:<br>1.存储的全部是对象，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令)<br>2.jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身</p><p>对象的由垃圾回收器负责回收，因此大小和生命周期不需要确定</p><p><strong><em>栈区</em></strong>:<br>1.每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区中<br>2.每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。<br>3.栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。<br><strong><em>\</em>方法区**</strong>:<br>1.又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。<br>2.方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。</p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/java_img/java_07_Sting/image-20210715124848127.png"></p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/java_img/java_07_Sting/image-20210715124823189.png"></p><p>具体实例：</p><p><strong>String str = new String(“abc”) 创建多少个对象？</strong></p><ol><li><p>在<strong>常量池中</strong>查找是否有“abc”对象</p></li><li><ul><li>有则返回对应的引用实例</li><li>没有则创建对应的实例对象</li></ul></li><li><p>在<strong>堆中</strong> new 一个 String(“abc”) 对象</p></li><li><p>将对象地址赋值给str,创建一个引用</p></li></ol><p>所以，常量池中没有“abc”字面量则创建两个对象，否则创建一个对象。以及创建一个引用</p><p><strong>String str1 = new String(“A”+”B”) ; 会创建多少个对象?</strong><br><strong>String str2 = new String(“ABC”) + “ABC” ; 会创建多少个对象?</strong></p><p>str1：<br>字符串常量池：”A”,”B”,”AB” : 3个<br>堆：new String(“AB”) ：1个<br>引用：str1 ：1个<br>总共 ：5个</p><p>str2 ：<br>字符串常量池：”ABC” : 1个<br>堆：new String(“ABC”) ：1个<br>引用：str2 ：1个<br>总共 ：3个</p>]]></content>
      
      
      <categories>
          
          <category> JAVA 基础阶段 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络原理</title>
      <link href="posts/7a46f93c.html"/>
      <url>posts/7a46f93c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计算机网络–第一章"><a href="#计算机网络–第一章" class="headerlink" title="计算机网络–第一章"></a>计算机网络–第一章</h1><h2 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h2><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704160806081.png" alt="导图"></p><h2 id="1-1计算机网络概述"><a href="#1-1计算机网络概述" class="headerlink" title="1.1计算机网络概述"></a>1.1计算机网络概述</h2><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704165159068.png" alt="脑图"></p><h3 id="1-1-1概念"><a href="#1-1-1概念" class="headerlink" title="1.1.1概念"></a>1.1.1概念</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704161639882.png" alt="计算机网络的概念"></p><h3 id="1-1-2计算机网络的功能"><a href="#1-1-2计算机网络的功能" class="headerlink" title="1.1.2计算机网络的功能"></a>1.1.2计算机网络的功能</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704162058009.png" alt="计算机网络的功能"></p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704162914322.png" alt="因特网发展阶段"></p><h3 id="1-1-3计算机的组成和分类"><a href="#1-1-3计算机的组成和分类" class="headerlink" title="1.1.3计算机的组成和分类"></a>1.1.3计算机的组成和分类</h3><h4 id="1-计算机网络的组成部分"><a href="#1-计算机网络的组成部分" class="headerlink" title="1.计算机网络的组成部分"></a>1.计算机网络的组成部分<img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704163451749.png" alt="计算机网络的组成部分"></h4><h4 id="2-计算机网络的工作方式"><a href="#2-计算机网络的工作方式" class="headerlink" title="2.计算机网络的工作方式"></a>2.计算机网络的工作方式</h4><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704164116607.png" alt="计算机网络的组成"></p><p>​            </p><h4 id="3-功能组成"><a href="#3-功能组成" class="headerlink" title="3.功能组成"></a>3.功能组成</h4><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704164331741.png" alt="计算机网络的组成"></p><h4 id="4-计算机网络的分类"><a href="#4-计算机网络的分类" class="headerlink" title="4.计算机网络的分类"></a>4.计算机网络的分类</h4><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210704165026410.png" alt="计算机网络的分类"></p><h3 id="1-1-4标准化工作"><a href="#1-1-4标准化工作" class="headerlink" title="1.1.4标准化工作"></a>1.1.4标准化工作</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705071616609.png" alt="标准娿工作"></p><h3 id="1-1-5性能指标"><a href="#1-1-5性能指标" class="headerlink" title="1.1.5性能指标"></a>1.1.5性能指标</h3><p>1、速率</p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705072720386.png" alt="速率"></p><p>2、带宽</p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705073946536.png" alt="带宽"></p><p>3.吞吐量</p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705074506837.png" alt="吞吐量"></p><p>4.时延</p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705075914364.png" alt="时延"></p><p>5.时延带宽积</p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705080211877.png" alt="时延带宽"></p><p>6.往返时延RTT</p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705080528198.png" alt="往返时延"></p><p>7、利用率<img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705080743646.png" alt="利用率"></p><h2 id="1-2-体系结构-amp-参考模型"><a href="#1-2-体系结构-amp-参考模型" class="headerlink" title="1.2 体系结构&amp;参考模型"></a>1.2 体系结构&amp;参考模型</h2><h3 id="1-2-1-分层结构、协议、接口、服务"><a href="#1-2-1-分层结构、协议、接口、服务" class="headerlink" title="1.2.1    分层结构、协议、接口、服务"></a>1.2.1    分层结构、协议、接口、服务</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705082522423.png" alt="分层结构"></p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705083224980.png"></p><h3 id="1-2-2-IOS-OSI模型"><a href="#1-2-2-IOS-OSI模型" class="headerlink" title="1.2.2    IOS/OSI模型"></a>1.2.2    IOS/OSI模型</h3><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705083718067.png" alt="OSI七层模型"></p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705152309237.png" alt="应用层"></p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705152507399.png" alt="表示层"></p><p><img src="https://gitee.com/zheng-haiping/img_manage/raw/master/408/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/image-20210705184846707.png" alt="会话层"></p><h3 id="1-2-3-TCP-IP协议"><a href="#1-2-3-TCP-IP协议" class="headerlink" title="1.2.3    TCP/IP协议"></a>1.2.3    TCP/IP协议</h3>]]></content>
      
      
      <categories>
          
          <category> 408 计算机网络原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
            <tag> 计算机网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源搭建教程</title>
      <link href="posts/d74d8b76.html"/>
      <url>posts/d74d8b76.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-blog-lucky </tag>
            
            <tag> 博客搭建教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
