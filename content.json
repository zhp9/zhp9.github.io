{"meta":{"title":"ZHP","subtitle":"ZHPの博客","description":"本科 | 软件工程 | JAVA","author":"ZHP","url":"https://zhp9.github.io","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2021-06-30T20:43:27.683Z","comments":true,"path":"404.html","permalink":"https://zhp9.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2021-07-01T07:32:36.017Z","updated":"2021-06-30T20:43:27.759Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://zhp9.github.io/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"","date":"2021-07-01T07:32:40.355Z","updated":"2021-06-30T20:43:27.762Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://zhp9.github.io/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2021-06-30T20:43:27.690Z","comments":true,"path":"List/index.html","permalink":"https://zhp9.github.io/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-30T20:43:27.759Z","comments":true,"path":"archives/index.html","permalink":"https://zhp9.github.io/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-30T20:43:27.760Z","comments":true,"path":"categories/index.html","permalink":"https://zhp9.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-30T20:43:27.759Z","comments":true,"path":"about/index.html","permalink":"https://zhp9.github.io/about/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2021-06-30T20:43:27.760Z","comments":true,"path":"census/index.html","permalink":"https://zhp9.github.io/census/index.html","excerpt":"","text":""},{"title":"","date":"2021-07-06T05:32:20.251Z","updated":"2021-07-06T05:32:20.251Z","comments":true,"path":"contact/index.html","permalink":"https://zhp9.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 ZHPの友链信息 博客名称: ZHPの博客 博客网址: https://zhp9.github.io/ 博客头像: https://static01.imgkr.com/temp/89ed0d2d538a4fdda441f9438dceabbd.jpg 博客介绍: The harder you work, the luckier you will be"},{"title":"tags","date":"2021-07-01T08:40:27.000Z","updated":"2021-07-06T05:11:33.971Z","comments":true,"path":"tags/index.html","permalink":"https://zhp9.github.io/tags/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2021-07-01T08:40:27.000Z","updated":"2021-07-06T05:11:51.655Z","comments":true,"path":"resource/index.html","permalink":"https://zhp9.github.io/resource/index.html","excerpt":"","text":""},{"title":"友链","date":"2021-07-01T08:42:10.000Z","updated":"2021-07-06T05:11:20.703Z","comments":true,"path":"friends/index.html","permalink":"https://zhp9.github.io/friends/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-06-30T20:43:27.690Z","comments":true,"path":"List/music/index.html","permalink":"https://zhp9.github.io/List/music/index.html","excerpt":"","text":""},{"title":"相册","date":"2021-07-01T07:34:29.193Z","updated":"2021-06-30T20:43:27.686Z","comments":true,"path":"List/galleries/index.html","permalink":"https://zhp9.github.io/List/galleries/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2021-06-30T20:43:27.690Z","comments":true,"path":"List/movies/index.html","permalink":"https://zhp9.github.io/List/movies/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2021-06-30T20:43:27.686Z","updated":"2021-06-30T20:43:27.686Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://zhp9.github.io/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-06-30T20:43:27.691Z","comments":true,"path":"List/tools/index.html","permalink":"https://zhp9.github.io/List/tools/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2021-06-30T20:43:27.686Z","updated":"2021-06-30T20:43:27.686Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://zhp9.github.io/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2021-06-30T20:43:27.686Z","updated":"2021-06-30T20:43:27.686Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://zhp9.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2021-06-30T20:43:27.687Z","updated":"2021-06-30T20:43:27.687Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://zhp9.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2021-06-30T20:43:27.687Z","updated":"2021-06-30T20:43:27.687Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://zhp9.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2021-06-30T20:43:27.688Z","updated":"2021-06-30T20:43:27.688Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://zhp9.github.io/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2021-06-30T20:43:27.688Z","updated":"2021-06-30T20:43:27.688Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://zhp9.github.io/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2021-06-30T20:43:27.688Z","updated":"2021-06-30T20:43:27.688Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://zhp9.github.io/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2021-06-30T20:43:27.689Z","updated":"2021-06-30T20:43:27.689Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://zhp9.github.io/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2021-06-30T20:43:27.689Z","updated":"2021-06-30T20:43:27.689Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://zhp9.github.io/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2021-06-30T20:43:27.689Z","updated":"2021-06-30T20:43:27.689Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://zhp9.github.io/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2021-07-01T07:34:36.489Z","updated":"2021-06-30T20:43:27.690Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://zhp9.github.io/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"Lambda表达式","slug":"Lambda表达式","date":"2021-08-02T13:18:05.000Z","updated":"2021-08-02T13:21:55.395Z","comments":true,"path":"posts/bbcf5ff7.html","link":"","permalink":"https://zhp9.github.io/posts/bbcf5ff7.html","excerpt":"","text":"Lambda表达式Lambda 表达式是 JDK8 的一个新特性，可以取代大部分的匿名内部类，写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。 JDK 也提供了大量的内置函数式接口供我们使用，使得 Lambda 表达式的运用更加方便、高效。 虽然使用 Lambda 表达式可以对某些接口进行简单的实现，但并不是所有的接口都可以使用 Lambda 表达式来实现。Lambda 规定接口中只能有一个需要被实现的方法，不是规定接口中只能有一个方法 jdk 8 中有另一个新特性：default， 被 default 修饰的方法会有默认实现，不是必须被实现的方法，所以不影响 Lambda 表达式的使用。 使用Lambda必须具有接口，且要求接口中有且仅有一个抽象方法。无论是JDK内置的 Runnable 、 Comparator 接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。 使用Lambda必须具有上下文推断。也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。 备注:有且仅有一个抽象方法的接口，称为“函数式接口” public interface Calculator { int calc(int a, int b); } public class Demo08InvokeCalc { public static void main(String[] args) { invokeCalc(120, 130, (int a, int b) ‐&gt; { return a + b; }); } private static void invokeCalc(int a, int b, Calculator calculator) { int result = calculator.calc(a, b); System.out.println(\"结果是：\" + result); } } /* public static void main(String[] args) { invokeCalc(120, 130, (a, b) ‐&gt; a + b); } */ //1. 小括号内参数的类型可以省略； //2. 如果小括号内有且仅有一个参，则小括号可以省略； //3. 如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。 Lambda语法的省略规则 在Lambda标准格式的基础上，使用省略写法的规则为： 1.小括号内参数的类型可以省略； 2.如果小括号内有且仅有一个参，则小括号可以省略； 如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。 Lambda表达式的3个组成部分 1.小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。 2.-&gt;是新引入的语法格式，代表指向动作。 3.大括号内的语法与传统方法体要求基本一致。 Lambda的使用前提 1. 使用Lambda必须具有接口，且要求接口中有且仅有一个抽象方法。无论是JDK内置的 Runnable 、 Comparator 接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。 2. 使用Lambda必须具有上下文推断。也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"基础阶段","slug":"基础阶段","permalink":"https://zhp9.github.io/tags/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"author":"ZHP"},{"title":"DNS的定义和选择","slug":"DNS的定义和选择","date":"2021-08-02T13:13:19.000Z","updated":"2021-08-02T13:16:56.566Z","comments":true,"path":"posts/b02a4af0.html","link":"","permalink":"https://zhp9.github.io/posts/b02a4af0.html","excerpt":"","text":"DNS的定义和选择一、DNS定义DNS：计算机域名系统（Dmain Name System 或 Domain Name Service）的缩写，它是由域名解析器和域名服务器组成的，它是由域名解析器和域名服务器组成的。域名服务器是指保存有该网络种所有主机的域名和对应IP地址，并具有将域名转化为IP地址功能的服务器。其中域名必须对于一个IP地址，一个IP地址可以有多个域名，而IP地址不一定有域名。域名系统采用类似目录树的等级结构。域名服务器透彻为客户机/服务器模式中的服务器方，它主要有两种服务器：主服务器和转发服务器。将域名映射为IP地址的过程就称为“域名解析”。 二、如何选择DNS先了解一下DNS的基本情况百度DNS：服务器地址：180.76.76.76 它的特点是云解析，提供云防护，无劫持，更精准的服务。 阿里DNS：服务器地址：223.5.5.5 和 223.6.6.6 它的特点是稳定，快速，智能 114DNS：服务器地址：114.114.114.114 它的特点是高速，稳定，可靠，无劫持 有以下服务器可以选择 有以下DNS可选：114DNS、阿里DNS、百度DNS、谷歌、OpenDNS等，其中114DNS、阿里DNS、百度DNS的节点都遍布全国各省份和地区，电信、联通、移动、教育网都有节点分布，具体分布可查阅官网。谷歌DNS、OpenDNS在国内并没有节点分布，国内用户使用的均为香港节点。 以下附加DNS解析地址： 114DNS： 114.114.114.114、114.114.115.115 阿里DNS： 223.5.5.5、223.6.6.6 百度DNS：180.76.76.76 谷歌DNS： 8.8.8.8、8.8.4.4 OpenDNS： 208.67.220.220、208.67.222.222 建议大陆用户首选114DNS，延迟率低，如果想访问国外网站，以及国外有服务器等建议考虑谷歌DNS。","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"基础阶段","slug":"基础阶段","permalink":"https://zhp9.github.io/tags/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"author":"ZHP"},{"title":"java初高级阶段巩固项目","slug":"java初高级阶段巩固项目","date":"2021-07-31T13:13:58.000Z","updated":"2021-07-31T13:33:18.852Z","comments":true,"path":"posts/b14f6953.html","link":"","permalink":"https://zhp9.github.io/posts/b14f6953.html","excerpt":"","text":"JAVA SE基础巩固顾客类package com.ping.demo10.homework.bean; import java.util.Objects; public class Customer implements Comparable&lt;Customer&gt; { private int id; private String name; private int age; private char gender; private String phone; private String email; @Override public int compareTo(Customer o) { return this.id - o.id; } public Customer() { } @Override public String toString() { return \"Customer{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", age=\" + age + \", gender=\" + gender + \", phone='\" + phone + '\\'' + \", email='\" + email + '\\'' + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Customer customer = (Customer) o; return id == customer.id &amp;&amp; age == customer.age &amp;&amp; gender == customer.gender &amp;&amp; Objects.equals(name, customer.name) &amp;&amp; Objects.equals(phone, customer.phone) &amp;&amp; Objects.equals(email, customer.email); } @Override public int hashCode() { return Objects.hash(id, name, age, gender, phone, email); } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public Customer(int id, String name, int age, char gender, String phone, String email) { this.id = id; this.name = name; this.age = age; this.gender = gender; this.phone = phone; this.email = email; } } 顾客信息package com.ping.demo10.homework.ui; import com.ping.demo10.homework.bean.Customer; import com.ping.demo10.homework.util.CMUtility; import java.util.ArrayList; import java.util.Iterator; public class CustomerView { public static ArrayList&lt;Customer&gt; customers = new ArrayList&lt;&gt;(); public static CMUtility cmUtility; static { customers.add(new Customer(0,\"张三\",21,'男',\"18772184520\",\"666.qq.com\")); } public static void main(String[] args) { while (true){ System.out.println(\"------------------------------客户信息管理软件------------------------------\"); System.out.println(\"1 添 加 客 户\"); System.out.println(\"2 修 改 客 户\"); System.out.println(\"3 删 除 客 户\"); System.out.println(\"4 客 户 列 表\"); System.out.println(\"5 退 出\"); System.out.print(\"请选择(1-5)：\"); switch (CMUtility.readMenuSelection()){ case '1': addCustomer();continue; case '2': alertCustomer();continue; case '3': deleteCustomer();continue; case '4': showCustomers();continue; case '5': System.exit(0); } } } private static void showCustomers() { System.out.println(\"------------------------------客户信息管理软件------------------------------\"); System.out.println(); System.out.println(); System.out.println(\"&lt;---------------------------客户列表---------------------------&gt;\"); System.out.println(\" 编号\\t姓名 \\t\\t性别\\t\\t年龄\\t\\t电话\\t\\t\\t\\t邮箱\"); Iterator&lt;Customer&gt; iterator = customers.iterator(); while (iterator.hasNext()) { Customer customer = iterator.next(); System.out.println(\" \" + customer.getId() + \" \\t\" + customer.getName() +\" \\t\\t\" + customer.getGender()+\"\\t\\t\" + customer.getAge() +\"\\t\\t\" + customer.getPhone() + \"\\t\\t\" + customer.getEmail()) ; } System.out.println(\"&lt;---------------------------客户列表---------------------------&gt;\"); System.out.println(); System.out.println(); } private static void deleteCustomer() { System.out.println(\"------------------------------客户信息管理软件------------------------------\"); System.out.println(); System.out.println(); System.out.println(\"&lt;---------------------删除客户---------------------&gt;\"); int index = 0; while (true) { try { System.out.print(\"请选择待删除客户编号(-1退出)：\"); int i = CMUtility.readInt(); if (i == -1) { System.out.println(\"&lt;---------------------删除完成---------------------&gt;\"); System.out.println(); System.out.println(); return; } System.out.println(\" 确认是否删除(Y/N)：(默认删除)\"); if (CMUtility.readConfirmSelection() == 'Y') { customers.remove(i); for (Customer customer : customers) { customer.setId(index++); } System.out.println(\"&lt;---------------------删除完成---------------------&gt;\"); System.out.println(); System.out.println(); return; } } catch (Exception e) { System.out.println(\"输入的编号有误\"); continue; } } } private static void alertCustomer() { System.out.println(\"------------------------------客户信息管理软件------------------------------\"); System.out.println(); System.out.println(); System.out.println(\"&lt;---------------------修改客户---------------------&gt;\"); while (true) { try { System.out.print(\"请选择(0-\" + (customers.size()-1) + \"的客户编号)(-1退出): \"); int i = CMUtility.readInt(); if (i ==-1) { return; } Customer customer = customers.get(i); System.out.print(\" 姓名(\" + customer.getName() + \")：&lt;直接回车表示不修改&gt;\"); customer.setName(CMUtility.readString(3,customer.getName())); System.out.print(\" 性别(\" + customer.getGender() + \")：\"); customer.setGender(CMUtility.readChar(customer.getGender())); System.out.print(\" 年龄(\" + customer.getAge() + \")：\"); customer.setAge(CMUtility.readInt(customer.getAge())); System.out.print(\" 电话(\" + customer.getPhone() + \")：\"); customer.setPhone(CMUtility.readString(11,customer.getPhone())); System.out.print(\" 邮箱(\" + customer.getEmail() + \")\"); customer.setEmail(CMUtility.readString(30,customer.getEmail())); } catch (Exception e) { System.out.print(\"您输入的编号有错误,请重新输入 0 \" + customers.size() + \":\"); continue; } break; } System.out.println(\"&lt;---------------------修改完成---------------------&gt;\"); System.out.println(); System.out.println(); } private static void addCustomer(){ Customer customer = new Customer(); System.out.println(); System.out.println(); System.out.println(\"&lt;--------------------------------添加用户--------------------------------&gt;\"); System.out.print(\" 姓名：\");customer.setName(CMUtility.readString(3)); System.out.print(\" 性别：\");customer.setGender(CMUtility.readChar()); System.out.print(\" 年龄：\");customer.setAge(CMUtility.readInt()); System.out.print(\" 电话：\");customer.setPhone(CMUtility.readString(11)); System.out.print(\" 邮箱：\");customer.setEmail(CMUtility.readString(30)); customer.setId(customers.size()); customers.add(customer); System.out.println(\"&lt;--------------------------------添加完成--------------------------------&gt;\"); System.out.println(); System.out.println(); } } 工具类package com.ping.demo10.homework.util; import java.util.*; /** CMUtility工具类： 将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。 */ public class CMUtility { private static Scanner scanner = new Scanner(System.in); /** 用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’5’中的任意字符，则方法返回。返回值为用户键入字符。 */ public static char readMenuSelection() { char c; for (; ; ) { String str = readKeyBoard(1, false); c = str.charAt(0); if (c != '1' &amp;&amp; c != '2' &amp;&amp; c != '3' &amp;&amp; c != '4' &amp;&amp; c != '5') { System.out.print(\"选择错误，请重新输入：\"); } else break; } return c; } /** 从键盘读取一个字符，并将其作为方法的返回值。 */ public static char readChar() { String str = readKeyBoard(1, false); return str.charAt(0); } /** 从键盘读取一个字符，并将其作为方法的返回值。 如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。 */ public static char readChar(char defaultValue) { String str = readKeyBoard(1, true); return (str.length() == 0) ? defaultValue : str.charAt(0); } /** 从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。 */ public static int readInt() { int n; for (; ; ) { String str = readKeyBoard(2, false); try { n = Integer.parseInt(str); break; } catch (NumberFormatException e) { System.out.print(\"数字输入错误，请重新输入：\"); } } return n; } /** 从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。 如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。 */ public static int readInt(int defaultValue) { int n; for (; ; ) { String str = readKeyBoard(2, true); if (str.equals(\"\")) { return defaultValue; } try { n = Integer.parseInt(str); break; } catch (NumberFormatException e) { System.out.print(\"数字输入错误，请重新输入：\"); } } return n; } /** 从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。 */ public static String readString(int limit) { return readKeyBoard(limit, false); } /** 从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。 如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。 */ public static String readString(int limit, String defaultValue) { String str = readKeyBoard(limit, true); return str.equals(\"\")? defaultValue : str; } /** 用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。 */ public static char readConfirmSelection() { char c; for (; ; ) { String str = readKeyBoard(1, false).toUpperCase(); c = str.charAt(0); if (c == 'Y' || c == 'N') { break; } else { System.out.print(\"选择错误，请重新输入：\"); } } return c; } private static String readKeyBoard(int limit, boolean blankReturn) { String line = \"\"; while (scanner.hasNextLine()) { line = scanner.nextLine(); if (line.length() == 0) { if (blankReturn) return line; else continue; } if (line.length() &lt; 1 || line.length() &gt; limit) { System.out.print(\"输入长度（不大于\" + limit + \"）错误，请重新输入：\"); continue; } break; } return line; } } 执行效果","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"基础阶段","slug":"基础阶段","permalink":"https://zhp9.github.io/tags/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"author":"ZHP"},{"title":"设计模式-第二篇","slug":"设计模式-第二篇","date":"2021-07-23T14:31:47.000Z","updated":"2021-07-23T14:40:38.205Z","comments":true,"path":"posts/360ff9a3.html","link":"","permalink":"https://zhp9.github.io/posts/360ff9a3.html","excerpt":"","text":"GoF 的 23 种设计模式的分类和功能两种分法:模式的目的和模式的作用范围根据目的来分 创建型模式:用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。 结构型模式:用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。 行为型模式用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。 根据作用范围来分 类模式：用于处理类和子类之间的关系，这写关系通过继承来建立，是静态的，在编译时刻便确定下来了。Gof种的工厂方法、（类）适配器、模板方法、解释器属于该模式。 对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化，更具动态性。GoF中除了以上4种，其他的都是对象模式。 GoF的23种设计模式的功能前面说明了 GoF 的 23 种设计模式的分类，现在对各个模式的功能进行介绍。 单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。 原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。 工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。 抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。 建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。 适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。 桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。 装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。 外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。 享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。 组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。 模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。 策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。 命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。 职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。 状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。 观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。 中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。 迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。 访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。 备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。 解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。 必须指出，这 23 种设计模式不是孤立存在的，很多模式之间存在一定的关联关系，在大的系统开发中常常同时使用多种设计模式，希望读者认真学好它们。","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"设计模式","slug":"设计模式","permalink":"https://zhp9.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"author":"ZHP"},{"title":"Java用Calender类型打印日历详解","slug":"Java用Calender类型打印日历详解","date":"2021-07-22T10:00:53.000Z","updated":"2021-07-22T10:04:18.222Z","comments":true,"path":"posts/3acd4d3c.html","link":"","permalink":"https://zhp9.github.io/posts/3acd4d3c.html","excerpt":"","text":"Java用Calender类型，打印日历详解首先我们要明白： 1.系统的每个星期的第一天是星期日 Calendar calendar = Calendar.getInstance();返回calender抽象类的子类对象（这里用到了多态） 返回的weekday需要减1才是中国的星期 月份也是如此，我们所使用的是1-12月，但是系统是0-11月，返回时需要减1 计算每个月第一天是星期几，打印空格个数根据自己需要的格式打印 package com.ping.demo02.homework; import com.sun.org.apache.xpath.internal.SourceTree; import java.util.Calendar; import java.util.Scanner; public class MyTest { public static void main(String[] args) { Calendar calendar = Calendar.getInstance(); Scanner sc = new Scanner(System.in); System.out.println(\"请输入想要查询的月份: \"); int month = sc.nextInt(); calendar.set(2021, month - 1, 1); System.out.println(\"星期一\\t星期二\\t星期三\\t星期四\\t星期五\\t星期六\\t星期日\"); int weekday = calendar.get(Calendar.DAY_OF_WEEK);//系统在时间为一个星期的第五天，实际上是星期4 for (int i = 0; i &lt; weekday -2; i++) {//打印前面三天的空格 System.out.print(\"\\t \\t\"); } for (; calendar.get(Calendar.MONTH) == month - 1;) { //从第一天开始遍历 System.out.print(\" \" + calendar.get(Calendar.DAY_OF_MONTH) + \"\\t \\t\"); calendar.add(Calendar.DAY_OF_MONTH, 1); //碰到周日要换行，为第一天1 if (calendar.get(Calendar.DAY_OF_WEEK ) == 2){ //但是经过加1的操作，则在2的时候换行 System.out.println(); } } } }","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"基础阶段","slug":"基础阶段","permalink":"https://zhp9.github.io/tags/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"author":"ZHP"},{"title":"设计模式-第一篇","slug":"设计模式-第一篇","date":"2021-07-22T02:34:54.000Z","updated":"2021-07-22T10:01:53.664Z","comments":true,"path":"posts/619157b.html","link":"","permalink":"https://zhp9.github.io/posts/619157b.html","excerpt":"","text":"设计模式:软件设计模式概述软件设计模式的产生背景设计模式”这个术语最初并不是出现在软件设计中，而是被用于建筑领域的设计中。 1977 年，美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯托夫·亚历山大（Christopher Alexander）在他的著作《建筑模式语言：城镇、建筑、构造（A Pattern Language: Towns Building Construction）中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。 1979 年他的另一部经典著作《建筑的永恒之道》（The Timeless Way of Building）进一步强化了设计模式的思想，为后来的建筑设计指明了方向。 1987 年，肯特·贝克（Kent Beck）和沃德·坎宁安（Ward Cunningham）首先将克里斯托夫·亚历山大的模式思想应用在 Smalltalk 中的图形用户接口的生成中，但没有引起软件界的关注。 直到 1990 年，软件工程界才开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。 1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》（Design Patterns: Elements of Reusable Object-Oriented Software）一书，在本教程中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）匿名著称。 直到今天，狭义的设计模式还是本教程中所介绍的 23 种经典设计模式。 软件设计模式的概念与意义有关软件设计模式的定义很多，有些从模式的特点来说明，有些从模式的作用来说明。本教程给出的定义是大多数学者公认的，从以下两个方面来说明。 1. 软件设计模式的概念软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。 2. 学习设计模式的意义设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。 可以提高程序员的思维能力、编程能力和设计能力。 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。 使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。 当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。 软件设计模式的基本要素软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。 1. 模式名称每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。 2. 问题问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。 3. 解决方案模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。 4. 效果描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"设计模式","slug":"设计模式","permalink":"https://zhp9.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"author":"ZHP"},{"title":"计算机电脑外接显示屏闪烁问题（硬件与软件结合）解决方法","slug":"计算机电脑外接显示屏闪烁问题（硬件与软件结合）解决方法","date":"2021-07-17T05:09:16.000Z","updated":"2021-07-17T06:36:29.071Z","comments":true,"path":"posts/2e7e0051.html","link":"","permalink":"https://zhp9.github.io/posts/2e7e0051.html","excerpt":"","text":"外接屏幕闪烁解决方法一、屏幕分辨率设置（配置）1、开始按钮—&gt;设置(组合快捷键：Win+I/Fn+F9 进入win10系统设置。) 2、左键单击”系统”（显示、声音、通知、电源）选项(或者“搜索框”输入字母“d”后弹出的下拉菜单—&gt;显示设置) 3、显示—&gt;高级显示设置 4.进入外接显示屏适配器 5.修改刷新频率与电脑一致 二、修改屏幕分辨率（配置） 三、硬件排查：1.将外接显示屏连接其他主机（排查外接显示器）2.排查线路（插拔你使用的HDMI线或者VGA线）3.排除同一插排影响，外接显示器和电脑电源分开（拔出电脑电源，使用电脑电池）如果出现硬件问题，该买的还得买 如有帮助，不胜荣幸！","categories":[{"name":"电脑小姿势","slug":"电脑小姿势","permalink":"https://zhp9.github.io/categories/%E7%94%B5%E8%84%91%E5%B0%8F%E5%A7%BF%E5%8A%BF/"}],"tags":[{"name":"电脑","slug":"电脑","permalink":"https://zhp9.github.io/tags/%E7%94%B5%E8%84%91/"},{"name":"小姿势","slug":"小姿势","permalink":"https://zhp9.github.io/tags/%E5%B0%8F%E5%A7%BF%E5%8A%BF/"}],"author":"ZHP"},{"title":"Java 正则表达式的使用","slug":"正则表达式的使用","date":"2021-07-15T08:06:01.000Z","updated":"2021-07-16T11:30:11.077Z","comments":true,"path":"posts/dc530199.html","link":"","permalink":"https://zhp9.github.io/posts/dc530199.html","excerpt":"","text":"","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"基础阶段","slug":"基础阶段","permalink":"https://zhp9.github.io/tags/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"author":"ZHP"},{"title":"ArrayList集合仿写","slug":"ArrayList集合仿写","date":"2021-07-15T06:21:12.000Z","updated":"2021-07-18T09:17:33.902Z","comments":true,"path":"posts/bbb8986e.html","link":"","permalink":"https://zhp9.github.io/posts/bbb8986e.html","excerpt":"","text":"ArrayList集合仿写1.ArrayList泛型不能直接填写基本数据类型,只能填写他们的包装类 2.方法: **&lt; E &gt;**表示一种指定的数据类型，叫做泛型。 E ，取自Element（元素）的首字母。在出现 E 的地方，我们使 用一种引用数据类型将其替换即可，表示我们将存储哪种引用类型的元素。 对于元素的操作,基本体现在——增、删、查。 常用的方法有： public boolean add(E e) ：将指定的元素添加到此集合的尾部。 public E remove(int index) ：移除此集合中指定位置上的元素。返回被删除的元素。 public E get(int index) ：返回此集合中指定位置上的元素。返回获取的元素。 public int size() ：返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界。 public E set(int index,E e): 设置索引的值为 e; public void clear():清空数组,实际上未清空,但是索引的存在,抛出异常 package com.ping.test02; //模拟java.util.ArrayList类 public class ZhpArrayList { private String[] elementData ; private int index = 0 ; //构造方法 public ZhpArrayList(){ elementData = new String[10]; } public void add(String element){ if(index &lt; elementData.length){ elementData[index] = element ; }else{ //创建一个临时数组,长度是原数组长度+5 String [] temp = new String[elementData.length + 5]; //将原数组中的数据复制到目标数组[temp]中 System.arraycopy(elementData,0,temp,0,elementData.length); //画龙点睛之笔 elementData = temp ;//非常重要 elementData[index] = element ; } index++; } public String get(int i){//简单 if (index &lt;= i) { throw new ArrayIndexOutOfBoundsException(\"数组下表越界，请查收!\"); } return elementData[i]; } public void clear(){//简单 index=0; } /* public String remove(int i){//有点难度 String s = elementData[i]; System.arraycopy(elementData, i+1, elementData, i , index - i - 1); index--; return s; }*/ public String remove(int i){//有点难度 String s = elementData[i]; for (int j = i; j &lt; index-i+1; j++) { elementData[j] = elementData[j+1]; } index--; return s; } public int size(){//简单 return index ; } public String set(int i, String element){//简单 String s = elementData[i]; elementData[i] = element ; return s; } } 测试: package com.ping.test02; public class ZhpArrayListTest { public static void main(String[] args) { ZhpArrayList list = new ZhpArrayList(); list.add(\"a\"); list.add(\"b\"); list.add(\"c\"); list.add(\"d\"); list.add(\"e\"); list.add(\"f\"); list.add(\"g\"); list.add(\"h\"); traverseList(list); System.out.println(\"删除索引为0的元素: \" + list.remove(0)); traverseList(list); System.out.println(\"更新索引为1的元素为 1的元素原来是: \" + list.set(1, \"1\")); traverseList(list); } /** * 遍历list集合 */ private static void traverseList(ZhpArrayList list) { for (int i = 0; i &lt; list.size(); i++) { System.out.print(list.get(i) + '\\t'); } System.out.println(); } }","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"基础阶段","slug":"基础阶段","permalink":"https://zhp9.github.io/tags/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"author":"ZHP"},{"title":"Java String:字符串常量池","slug":"Java-String-字符串常量池","date":"2021-07-15T05:39:10.000Z","updated":"2021-07-15T05:44:04.756Z","comments":true,"path":"posts/67c36978.html","link":"","permalink":"https://zhp9.github.io/posts/67c36978.html","excerpt":"","text":"Java String:字符串常量池基础的引用数据类型; java设计者为String提供字符串常量池以提高其性能 现在就来讲讲字符串常量池吧 1.字符串常量池的具体原理是什么?2.字符串常量池的设计思想是什么?a.字符串的分配,和其他的对象分配一样,耗费高昂的时间和空间代价,作为最基础的数据类型,大量频繁的创建字符串,极大程度的影响程序的性能. b.JVM为了提高性能和减少内存开销,在实例字符串常量的时候进行了一些优化 为字符串开辟一个字符串常量池,类似缓存区 创建字符串常量时,首先坚持字符串常量池是否存在该字符串,存在的话返回引用实例,不存在,实例该字符串并放入池中 1.实现的基础 实现该优化的基础是因为字符串是不可变的，可以不用担心数据冲突进行共享 运行时实例创建的全局字符串常量池中有一个表，总是为池中每个唯一的字符串对象维护一个引用,这就意味着它们一直引用着字符串常量池中的对象，所以，在常量池中的这些字符串不会被垃圾收集器回收 代码：从字符串常量池中获取相应的字符串 String s1 = \"hello\";//原来不存在，实例化该字符串并且放入常量池 String ss = \"hello\";//字符串常量池中含有，返回“hello”的引用实例 System.out.println(\"s1 == ss :\" + (s1 == ss)); //true 3.字符串常量池在哪里?首先先了解一下堆，栈，方法区 \\堆区**:1.存储的全部是对象，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令)2.jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身 对象的由垃圾回收器负责回收，因此大小和生命周期不需要确定 栈区:1.每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区中2.每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。3.栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。\\方法区**:1.又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。2.方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。 具体实例： String str = new String(“abc”) 创建多少个对象？ 在常量池中查找是否有“abc”对象 有则返回对应的引用实例 没有则创建对应的实例对象 在堆中 new 一个 String(“abc”) 对象 将对象地址赋值给str,创建一个引用 所以，常量池中没有“abc”字面量则创建两个对象，否则创建一个对象。以及创建一个引用 String str1 = new String(“A”+”B”) ; 会创建多少个对象?String str2 = new String(“ABC”) + “ABC” ; 会创建多少个对象? str1：字符串常量池：”A”,”B”,”AB” : 3个堆：new String(“AB”) ：1个引用：str1 ：1个总共 ：5个 str2 ：字符串常量池：”ABC” : 1个堆：new String(“ABC”) ：1个引用：str2 ：1个总共 ：3个","categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"基础阶段","slug":"基础阶段","permalink":"https://zhp9.github.io/tags/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"}],"author":"ZHP"},{"title":"计算机网络原理","slug":"计算机网络 第一章","date":"2021-07-01T16:00:00.000Z","updated":"2021-07-18T00:31:59.261Z","comments":true,"path":"posts/7a46f93c.html","link":"","permalink":"https://zhp9.github.io/posts/7a46f93c.html","excerpt":"","text":"计算机网络–第一章导图 1.1计算机网络概述 1.1.1概念 1.1.2计算机网络的功能 1.1.3计算机的组成和分类1.计算机网络的组成部分2.计算机网络的工作方式 ​ 3.功能组成 4.计算机网络的分类 1.1.4标准化工作 1.1.5性能指标1、速率 2、带宽 3.吞吐量 4.时延 5.时延带宽积 6.往返时延RTT 7、利用率 1.2 体系结构&amp;参考模型1.2.1 分层结构、协议、接口、服务 1.2.2 IOS/OSI模型 1.2.3 TCP/IP协议","categories":[{"name":"408 计算机网络原理","slug":"408-计算机网络原理","permalink":"https://zhp9.github.io/categories/408-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"408","slug":"408","permalink":"https://zhp9.github.io/tags/408/"},{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"https://zhp9.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}],"author":"ZHP"},{"title":"开源搭建教程","slug":"BlogOpen","date":"2021-06-30T16:00:00.000Z","updated":"2021-07-18T00:31:39.564Z","comments":true,"path":"posts/d74d8b76.html","link":"","permalink":"https://zhp9.github.io/posts/d74d8b76.html","excerpt":"","text":"","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://zhp9.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo-blog-lucky","slug":"hexo-blog-lucky","permalink":"https://zhp9.github.io/tags/hexo-blog-lucky/"},{"name":"博客搭建教程","slug":"博客搭建教程","permalink":"https://zhp9.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"}],"author":"ZHP"}],"categories":[{"name":"JAVA 基础阶段","slug":"JAVA-基础阶段","permalink":"https://zhp9.github.io/categories/JAVA-%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"},{"name":"电脑小姿势","slug":"电脑小姿势","permalink":"https://zhp9.github.io/categories/%E7%94%B5%E8%84%91%E5%B0%8F%E5%A7%BF%E5%8A%BF/"},{"name":"408 计算机网络原理","slug":"408-计算机网络原理","permalink":"https://zhp9.github.io/categories/408-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"},{"name":"博客篇","slug":"博客篇","permalink":"https://zhp9.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://zhp9.github.io/tags/JAVA/"},{"name":"基础阶段","slug":"基础阶段","permalink":"https://zhp9.github.io/tags/%E5%9F%BA%E7%A1%80%E9%98%B6%E6%AE%B5/"},{"name":"设计模式","slug":"设计模式","permalink":"https://zhp9.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"电脑","slug":"电脑","permalink":"https://zhp9.github.io/tags/%E7%94%B5%E8%84%91/"},{"name":"小姿势","slug":"小姿势","permalink":"https://zhp9.github.io/tags/%E5%B0%8F%E5%A7%BF%E5%8A%BF/"},{"name":"408","slug":"408","permalink":"https://zhp9.github.io/tags/408/"},{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"https://zhp9.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"},{"name":"hexo-blog-lucky","slug":"hexo-blog-lucky","permalink":"https://zhp9.github.io/tags/hexo-blog-lucky/"},{"name":"博客搭建教程","slug":"博客搭建教程","permalink":"https://zhp9.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"}]}